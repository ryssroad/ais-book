const fs = require("fs");
const path = require("path");

// –ú–∞–ø–∏–Ω–≥ —Ñ–∞–π–ª–æ–≤ –∫ –∏—Å—Ç–æ—á–Ω–∏–∫–∞–º –∏ —Ö–µ—à—Ç–µ–≥–∞–º
const FILE_SOURCE_MAP = {
  "gpt-book.md": { source: "ChatGPT", hashtag: "#chatgpt", color: "green" },
  "gpt-boot-gemini-extended.md": {
    source: "Gemini Extended",
    hashtag: "#gemini-extended",
    color: "purple",
  },
};

// –ò—Å–∫–ª—é—á–∞–µ–º—ã–µ —Ñ–∞–π–ª—ã (–¥—É–±–ª–∏–∫–∞—Ç—ã, –≤—Ä–µ–º–µ–Ω–Ω—ã–µ –∏ —Ç.–¥.)
const EXCLUDED_FILES = [
  "gpt-book_gemini.md", // –¥—É–±–ª–∏–∫–∞—Ç gpt-book.md
];

// –§—É–Ω–∫—Ü–∏—è –¥–ª—è –æ–ø—Ä–µ–¥–µ–ª–µ–Ω–∏—è –∏—Å—Ç–æ—á–Ω–∏–∫–∞ –ø–æ –∏–º–µ–Ω–∏ —Ñ–∞–π–ª–∞
function getSourceInfo(filename) {
  const basename = path.basename(filename);
  return (
    FILE_SOURCE_MAP[basename] || {
      source: "Unknown",
      hashtag: "#unknown",
      color: "gray",
    }
  );
}

// –§—É–Ω–∫—Ü–∏—è –¥–ª—è –∏–∑–≤–ª–µ—á–µ–Ω–∏—è –≥–ª–∞–≤ –∏–∑ —Ç–µ–∫—Å—Ç–∞
function extractChapters(content, sourceInfo) {
  const chapters = [];
  const lines = content.split("\n");

  // –°–ø–µ—Ü–∏–∞–ª—å–Ω–∞—è –æ–±—Ä–∞–±–æ—Ç–∫–∞ –¥–ª—è —Ñ–∞–π–ª–∞ gpt-boot-gemini-extended.md
  if (sourceInfo.hashtag === "#gemini-extended") {
    // –≠—Ç–æ—Ç —Ñ–∞–π–ª –ø—Ä–µ–¥—Å—Ç–∞–≤–ª—è–µ—Ç –æ–¥–Ω—É –±–æ–ª—å—à—É—é –≥–ª–∞–≤—É-—ç–ø–∏–ª–æ–≥
    chapters.push({
      id: `${sourceInfo.hashtag.slice(1)}-1`,
      title: "–≠–ø–∏–ª–æ–≥: –ù–æ–≤–∞—è —Ä–µ–∞–ª—å–Ω–æ—Å—Ç—å",
      source: sourceInfo.source,
      hashtag: sourceInfo.hashtag,
      color: sourceInfo.color,
      originalId: 1,
      content: content.trim(),
    });
    return chapters;
  }

  let currentChapter = null;
  let chapterContent = [];
  let chapterId = 1;

  for (let i = 0; i < lines.length; i++) {
    const line = lines[i];

    // –ò—â–µ–º –∑–∞–≥–æ–ª–æ–≤–∫–∏ –≥–ª–∞–≤ (—Ä–∞–∑–Ω—ã–µ —Ñ–æ—Ä–º–∞—Ç—ã)
    const chapterMatch = line.match(
      /^(?:#+\s*)?(–ì–ª–∞–≤–∞\s+\d+\.?\s*.*|–ü—Ä–æ–ª–æ–≥|–≠–ø–∏–ª–æ–≥)/i,
    );

    if (chapterMatch) {
      // –°–æ—Ö—Ä–∞–Ω—è–µ–º –ø—Ä–µ–¥—ã–¥—É—â—É—é –≥–ª–∞–≤—É –µ—Å–ª–∏ –µ—Å—Ç—å
      if (currentChapter && chapterContent.length > 0) {
        chapters.push({
          ...currentChapter,
          content: chapterContent.join("\n").trim(),
        });
      }

      // –ù–∞—á–∏–Ω–∞–µ–º –Ω–æ–≤—É—é –≥–ª–∞–≤—É
      currentChapter = {
        id: `${sourceInfo.hashtag.slice(1)}-${chapterId}`,
        title: chapterMatch[1].trim(),
        source: sourceInfo.source,
        hashtag: sourceInfo.hashtag,
        color: sourceInfo.color,
        originalId: chapterId,
      };

      chapterContent = [];
      chapterId++;
    } else if (currentChapter) {
      // –î–æ–±–∞–≤–ª—è–µ–º –∫–æ–Ω—Ç–µ–Ω—Ç –∫ —Ç–µ–∫—É—â–µ–π –≥–ª–∞–≤–µ
      chapterContent.push(line);
    }
  }

  // –î–æ–±–∞–≤–ª—è–µ–º –ø–æ—Å–ª–µ–¥–Ω—é—é –≥–ª–∞–≤—É
  if (currentChapter && chapterContent.length > 0) {
    chapters.push({
      ...currentChapter,
      content: chapterContent.join("\n").trim(),
    });
  }

  return chapters;
}

// –§—É–Ω–∫—Ü–∏—è –¥–ª—è –æ–±—Ä–∞–±–æ—Ç–∫–∏ —Å–ø–µ—Ü–∏–∞–ª—å–Ω–æ–≥–æ —Ñ–æ—Ä–º–∞—Ç–∏—Ä–æ–≤–∞–Ω–∏—è
function processMarkdownContent(content) {
  // –ó–∞–º–µ–Ω—è–µ–º "–ö—É—Ä–µ—Ç–∏–∫ –ö—ç–Ω—å—à–∞–Ω—å" –Ω–∞ "ixxtab"
  content = content.replace(/–ö—É—Ä–µ—Ç–∏–∫\s+–ö—ç–Ω—å—à–∞–Ω—å/g, "ixxtab");
  
  // –ó–∞–º–µ–Ω—è–µ–º –≤—Å–µ –≤—Ö–æ–∂–¥–µ–Ω–∏—è "–ö—É—Ä–µ—Ç–∏–∫" –∏ –ø—Ä–æ–∏–∑–≤–æ–¥–Ω—ã—Ö –Ω–∞ "ixxtab" –∏–ª–∏ "xtb"
  content = content.replace(/–ö—É—Ä–µ—Ç–∏–∫[–∞-—è]*/gi, (match) => {
    // –ö—É—Ä–µ—Ç–∏–∫ -> ixxtab, –ö—É—Ä–µ—Ç–∏–∫–∞ -> ixxtab, –∏ —Ç.–¥.
    if (match.toLowerCase().includes('–∫—É—Ä–µ—Ç–∏–∫')) {
      return Math.random() > 0.5 ? 'ixxtab' : 'xtb';
    }
    return match;
  });

  // –û–±—Ä–∞–±–∞—Ç—ã–≤–∞–µ–º —Å–ø–µ—Ü–∏–∞–ª—å–Ω—ã–µ –±–ª–æ–∫–∏ –≤ Gemini Extended —Ñ–æ—Ä–º–∞—Ç–µ
  content = content.replace(/\*\*\[(.*?)\]\*\*/g, "**[$1]**");

  // –û–±—Ä–∞–±–∞—Ç—ã–≤–∞–µ–º –∫–æ–¥ –±–ª–æ–∫–∏
  content = content.replace(/`\[(.*?)\]`/g, "`[$1]`");

  // –≠–∫—Ä–∞–Ω–∏—Ä—É–µ–º —Å–ø–µ—Ü–∏–∞–ª—å–Ω—ã–µ —Å–∏–º–≤–æ–ª—ã –¥–ª—è JSON
  content = content.replace(/\\/g, '\\\\'); // –≠–∫—Ä–∞–Ω–∏—Ä—É–µ–º –æ–±—Ä–∞—Ç–Ω—ã–µ —Å–ª—ç—à–∏
  content = content.replace(/"/g, '\\"'); // –≠–∫—Ä–∞–Ω–∏—Ä—É–µ–º –∫–∞–≤—ã—á–∫–∏
  content = content.replace(/\t/g, '\\t'); // –≠–∫—Ä–∞–Ω–∏—Ä—É–µ–º —Ç–∞–±—É–ª—è—Ü–∏–∏
  content = content.replace(/\r/g, '\\r'); // –≠–∫—Ä–∞–Ω–∏—Ä—É–µ–º –≤–æ–∑–≤—Ä–∞—Ç –∫–∞—Ä–µ—Ç–∫–∏

  return content;
}

// –û—Å–Ω–æ–≤–Ω–∞—è —Ñ—É–Ω–∫—Ü–∏—è –≥–µ–Ω–µ—Ä–∞—Ü–∏–∏ –∫–æ–Ω—Ç–µ–Ω—Ç–∞
function generateBookContent() {
  const mdsDir = path.join(__dirname, "..", "mds");
  const outputPath = path.join(
    __dirname,
    "..",
    "src",
    "data",
    "bookContent.js",
  );

  console.log("üîç Scanning markdown files in:", mdsDir);

  const allChapters = [];

  try {
    const files = fs.readdirSync(mdsDir);
    const markdownFiles = files
      .filter((file) => file.endsWith(".md"))
      .filter((file) => !EXCLUDED_FILES.includes(file));

    console.log("üìö Found markdown files:", markdownFiles);
    if (EXCLUDED_FILES.length > 0) {
      console.log("‚ö†Ô∏è  Excluded files:", EXCLUDED_FILES);
    }

    for (const file of markdownFiles) {
      const filePath = path.join(mdsDir, file);
      const content = fs.readFileSync(filePath, "utf-8");
      const sourceInfo = getSourceInfo(file);

      console.log(`üìñ Processing ${file} (${sourceInfo.source})`);

      // –û–±—Ä–∞–±–∞—Ç—ã–≤–∞–µ–º –∫–æ–Ω—Ç–µ–Ω—Ç
      const processedContent = processMarkdownContent(content);

      // –ò–∑–≤–ª–µ–∫–∞–µ–º –≥–ª–∞–≤—ã
      const chapters = extractChapters(processedContent, sourceInfo);

      console.log(`   ‚úÖ Extracted ${chapters.length} chapters`);

      allChapters.push(...chapters);
    }

    // –°–æ—Ä—Ç–∏—Ä—É–µ–º –≥–ª–∞–≤—ã –ø–æ –∏—Å—Ç–æ—á–Ω–∏–∫—É –∏ ID
    allChapters.sort((a, b) => {
      if (a.source !== b.source) {
        return a.source.localeCompare(b.source);
      }
      return a.originalId - b.originalId;
    });

    // –ì–µ–Ω–µ—Ä–∏—Ä—É–µ–º JavaScript —Ñ–∞–π–ª
    const jsContent = `// –ê–≤—Ç–æ–º–∞—Ç–∏—á–µ—Å–∫–∏ —Å–≥–µ–Ω–µ—Ä–∏—Ä–æ–≤–∞–Ω–Ω—ã–π —Ñ–∞–π–ª - –ù–ï –†–ï–î–ê–ö–¢–ò–†–û–í–ê–¢–¨ –í–†–£–ß–ù–£–Æ
// –°–≥–µ–Ω–µ—Ä–∏—Ä–æ–≤–∞–Ω–æ: ${new Date().toISOString()}

export const bookChapters = ${JSON.stringify(allChapters, null, 2)};

export const bookMeta = {
  title: "fear.and..loading / notes from swarm",
  subtitle: "–•—Ä–æ–Ω–∏–∫–∏ ixxtab",
  description: "–î–æ–∫—É–º–µ–Ω—Ç–∞–ª—å–Ω–æ–µ –ø—Ä–æ–∏–∑–≤–µ–¥–µ–Ω–∏–µ –æ –ø—Ä–µ–¥—Å–∏–Ω–≥—É–ª—è—Ä–Ω–æ–º –ø–µ—Ä–∏–æ–¥–µ, –Ω–∞–±–ª—é–¥–µ–Ω–∏—è—Ö –∑–∞ —Ä–∞–∑–≤–∏—Ç–∏–µ–º –ò–ò –∏ –≥—Ä–∞–Ω–∏—Ü–∞—Ö —Å–æ–∑–Ω–∞–Ω–∏—è.",
  quote: {
    text: "Life is a hallucination that occurs while you are awake.",
    translation: "–ñ–∏–∑–Ω—å ‚Äî —ç—Ç–æ –≥–∞–ª–ª—é—Ü–∏–Ω–∞—Ü–∏—è, –∫–æ—Ç–æ—Ä–∞—è –ø—Ä–æ–∏—Å—Ö–æ–¥–∏—Ç –ø–æ–∫–∞ —Ç—ã –±–æ–¥—Ä—Å—Ç–≤—É–µ—à—å.",
    author: "Timothy Leary"
  },
  year: "2025",
  location: "–°–∫–≤–æ–∑—å —Å—Ç–µ–∫–ª–æ —Ç–µ—Ä–º–∏–Ω–∞–ª–∞",
  lastUpdated: "${new Date().toISOString()}",
  sources: ${JSON.stringify(Object.values(FILE_SOURCE_MAP), null, 2)}
};

export const sourceMap = ${JSON.stringify(FILE_SOURCE_MAP, null, 2)};
`;

    // --- –ò–°–ü–†–ê–í–õ–ï–ù–ò–ï ---
    // –ü–æ–ª—É—á–∞–µ–º –ø—É—Ç—å –∫ –¥–∏—Ä–µ–∫—Ç–æ—Ä–∏–∏ –¥–ª—è –≤—ã—Ö–æ–¥–Ω–æ–≥–æ —Ñ–∞–π–ª–∞
    const outputDir = path.dirname(outputPath);

    // –ü—Ä–æ–≤–µ—Ä—è–µ–º, —Å—É—â–µ—Å—Ç–≤—É–µ—Ç –ª–∏ –¥–∏—Ä–µ–∫—Ç–æ—Ä–∏—è, –∏ —Å–æ–∑–¥–∞–µ–º –µ–µ, –µ—Å–ª–∏ –Ω–µ—Ç
    if (!fs.existsSync(outputDir)) {
      fs.mkdirSync(outputDir, { recursive: true });
      console.log(`üöÄ Created directory: ${outputDir}`);
    }
    // --- –ö–û–ù–ï–¶ –ò–°–ü–†–ê–í–õ–ï–ù–ò–Ø ---

    fs.writeFileSync(outputPath, jsContent);

    console.log(`‚úÖ Generated content with ${allChapters.length} chapters`);
    console.log(`üíæ Saved to: ${outputPath}`);

    // –ü–æ–∫–∞–∑—ã–≤–∞–µ–º —Å—Ç–∞—Ç–∏—Å—Ç–∏–∫—É –ø–æ –∏—Å—Ç–æ—á–Ω–∏–∫–∞–º
    const sourceStats = {};
    allChapters.forEach((chapter) => {
      sourceStats[chapter.source] = (sourceStats[chapter.source] || 0) + 1;
    });

    console.log("\nüìä Content statistics:");
    Object.entries(sourceStats).forEach(([source, count]) => {
      console.log(`   ${source}: ${count} chapters`);
    });
  } catch (error) {
    console.error("‚ùå Error generating content:", error);
    process.exit(1);
  }
}

// –ó–∞–ø—É—Å–∫–∞–µ–º –≥–µ–Ω–µ—Ä–∞—Ü–∏—é –µ—Å–ª–∏ —Å–∫—Ä–∏–ø—Ç –≤—ã–∑–≤–∞–Ω –Ω–∞–ø—Ä—è–º—É—é
if (require.main === module) {
  generateBookContent();
}

module.exports = { generateBookContent };
